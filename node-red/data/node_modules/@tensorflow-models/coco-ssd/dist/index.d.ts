import * as tf from '@tensorflow/tfjs-core';
export { version } from './version';
export declare type ObjectDetectionBaseModel = 'mobilenet_v1' | 'mobilenet_v2' | 'lite_mobilenet_v2';
export interface DetectedObject {
    bbox: [number, number, number, number];
    class: string;
    score: number;
}
export interface ModelConfig {
    base?: ObjectDetectionBaseModel;
    modelUrl?: string;
}
export declare function load(config?: ModelConfig): Promise<ObjectDetection>;
export declare class ObjectDetection {
    private modelPath;
    private model;
    constructor(base: ObjectDetectionBaseModel, modelUrl?: string);
    private getPrefix;
    load(): Promise<void>;
    private infer;
    private buildDetectedObjects;
    private calculateMaxScores;
    detect(img: tf.Tensor3D | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement, maxNumBoxes?: number): Promise<DetectedObject[]>;
    dispose(): void;
}
